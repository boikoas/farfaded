 <div class="col-lg-12">
    <div id="align-right">
        @Html.ActionLink( "Back", "Index", "User", null, new { @class = "btn btn-primary" })
     </div>
 </div>
<input id="value" class="hidden" value="@ViewBag.Type">
<div class="jumbotron">
    <script src="http://d3js.org/d3.v3.min.js"> </script>
    <style>
        .axis path, .axis line {
            fill: none;
            stroke: #333;
        }
        .axis .grid-line {
            stroke: #000;
            stroke-opacity: 0.2;
        }
        .axis text {
            font: 10px Verdana;
        }
    </style>
    <script>
        var type = $("#value").value;


        function drawGraph(type) {
            var height = 500, 
                width = 1000, 
                margin=70,
                data = [];


            var graphName = "График расходования ";
            switch (type) {
            case 'energy':
                var rawData = [
                    { x: 1, y: 18 }, { x: 3, y: 47 }, { x: 5, y: 21 }, { x: 8, y: 24 },
                    { x: 13, y: 15 }, { x: 16, y: 10 }, { x: 19, y: 5 },
                    { x: 22, y: 12 }, { x: 25, y: 24 }, { x: 30, y: 31 }
                ];
                var oyName = "кВт";
                graphName +="электричества";
                break;
            case 'holvoda':
                var rawData = [
                    { x: 1, y: 18 }, { x: 3, y: 47 }, { x: 5, y: 21 }, { x: 8, y: 24 },
                    { x: 13, y: 15 }, { x: 16, y: 10 }, { x: 19, y: 5 },
                    { x: 22, y: 12 }, { x: 25, y: 24 }, { x: 30, y: 31 }
                ];
                var oyName = "м³";
                graphName +="холодной воды";
                break;
            case 'gorvoda':
                var rawData = [
                    { x: 1, y: 18 }, { x: 3, y: 47 }, { x: 5, y: 21 }, { x: 8, y: 24 },
                    { x: 13, y: 15 }, { x: 16, y: 10 }, { x: 19, y: 5 },
                    { x: 22, y: 12 }, { x: 25, y: 24 }, { x: 30, y: 31 }
                ];
                var oyName = "м³";
                graphName +="горячей воды";
                break;
            case 'otoplenie':
                var rawData = [
                    { x: 1, y: 18 }, { x: 3, y: 47 }, { x: 5, y: 21 }, { x: 8, y: 24 },
                    { x: 13, y: 15 }, { x: 16, y: 10 }, { x: 19, y: 5 },
                    { x: 22, y: 12 }, { x: 25, y: 24 }, { x: 30, y: 31 }
                ];
                var oyName = "ГКал";
                graphName +="тепла";
                break;
            }
 
            var svg = d3.select(".jumbotron").append("svg")
                .attr("class", "axis")
                .attr("width", width)
                .attr("height", height);
 
// длина оси X= ширина контейнера svg - отступ слева и справа
            var xAxisLength = width - 2 * margin;    //2 
  
// длина оси Y = высота контейнера svg - отступ сверху и снизу
            var yAxisLength = height - 2 * margin;
	
// функция интерполяции значений на ось Х  
            var scaleX = d3.scale.linear()
                .domain([0, 30]) //30
                .range([0, xAxisLength]);
			 
// функция интерполяции значений на ось Y
            var scaleY = d3.scale.linear()
                .domain([60, 0])
                .range([0, yAxisLength]);
 
            for(i=0; i<rawData.length; i++)
                data.push({x: scaleX(rawData[i].x)+ margin, y: scaleY(rawData[i].y) + margin});
			 
// создаем ось X   
            var xAxis = d3.svg.axis()
                .scale(scaleX)
                .orient("bottom")
                .ticks(30);
// создаем ось Y             
            var yAxis = d3.svg.axis()
                .scale(scaleY)
                .orient("left");
			  
            // отрисовка оси Х             
            svg.append("g")       
                .attr("class", "x-axis")
                .attr("transform",  // сдвиг оси вниз и вправо
                    "translate(" + margin + "," + (height - margin) + ")")
                .call(xAxis);
 
            // отрисовка оси Y 
            svg.append("g")       
                .attr("class", "y-axis")
                .attr("transform", // сдвиг оси вниз и вправо на margin
                    "translate(" + margin + "," + margin + ")")
                .call(yAxis);
 
// создаем набор вертикальных линий для сетки   
            d3.selectAll("g.x-axis g.tick")
                .append("line") // добавляем линию
                .classed("grid-line", true) // добавляем класс
                .attr("x1", 0)
                .attr("y1", 0)
                .attr("x2", 0)
                .attr("y2", - (height - 2 * margin)); //2
	 
// рисуем горизонтальные линии 
            d3.selectAll("g.y-axis g.tick")
                .append("line")
                .classed("grid-line", true)
                .attr("x1", 0)
                .attr("y1", 0)
                .attr("x2", yAxisLength + 500)
                .attr("y2", 0);
 
// функция, создающая по массиву точек линии
            var line = d3.svg.line()
                .x(function(d){return d.x;})
                .y(function(d){return d.y;});
 
            var g = svg.append("g");
            g.append("path")
                .attr("d", line(data))
                .style("stroke", "steelblue")
                .style("stroke-width", 2);
// добавляем заголовок
            g.append("text")
                .attr("x", (width / 2))
                .attr("y", margin - 10 )
                .attr("text-anchor", "middle")
                .style("font-size", "22px")
                .text(graphName);
 
            g.append("text")
                .attr("x", margin + 11)
                .attr("y", margin - 11)
                .attr("text-anchor", "end")
                .style("font-size", "11px")
                .text(oyName);
 
            g.append("text")
                .attr("x", width - margin + 11)
                .attr("y", height - margin - 5)
                .attr("text-anchor", "end")
                .style("font-size", "11px")
                .text("День");
// добавляем отметки к точкм
            svg.selectAll(".dot")
                .data(rawData)
                .enter().append("circle")
                .attr("class", "dot")
                .attr("r", 3.5)
                .attr("cx", function(d) { return scaleX(d.x)+margin; })
                .attr("cy", function(d) { return scaleY(d.y)+margin; });
        }
    </script>
</div>

<div class="row">
    <div class="col-xs-4 col-lg-4 col-md-4">Задолженности</div>
    <div class="col-xs-4 col-lg-4 col-md-4">Управление графиком</div>
</div>